# This is a basic workflow to help you get started with Actions

name: Connectivity

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
 id-token: write
 contents: read
 actions: read
 security-events: write
 pull-requests: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -no-color
        #working-directory: connectivity

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}


      # #Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false -var-file=virtual_network.tfvars -var-file=network_security_group_definition.tfvars -var-file=application_gateways.tfvars -var-file=applications.tfvars -var-file=configuration.tfvars -no-color 
        #working-directory: connectivity

      - name: Terraform Apply - 1
        #if: github.ref == 'refs/heads/"main1"' && github.event_name == 'push'
        run: terraform apply -auto-approve -var-file=virtual_network.tfvars -var-file=network_security_group_definition.tfvars -var-file=application_gateways.tfvars -var-file=applications.tfvars -var-file=configuration.tfvars
        working-directory: connectivity